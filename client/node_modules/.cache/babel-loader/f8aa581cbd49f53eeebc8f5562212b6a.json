{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/Ivanp/Desktop/projects-V2/Bookish/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/Ivanp/Desktop/projects-V2/Bookish/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as api from'../api';// action creatores - functions that return actions\nexport var getPosts=function getPosts(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var _yield$api$fetchPosts,data,action;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return api.fetchPosts();case 3:_yield$api$fetchPosts=_context.sent;data=_yield$api$fetchPosts.data;dispatch({type:'FETCH_ALL',payload:data});_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);console.log(_context.t0.message);case 11:action={type:'FETCH_ALL',payload:[]};dispatch(action);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["C:/Users/Ivanp/Desktop/projects-V2/Bookish/client/src/actions/posts.js"],"names":["api","getPosts","dispatch","fetchPosts","data","type","payload","console","log","message","action"],"mappings":"6UACA,MAAO,GAAKA,CAAAA,GAAZ,KAAqB,QAArB,CAEA;AACA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,kGAAM,iBAAOC,QAAP,8LAGCF,CAAAA,GAAG,CAACG,UAAJ,EAHD,4CAGdC,IAHc,uBAGdA,IAHc,CAKtBF,QAAQ,CAAC,CAAEG,IAAI,CAAE,WAAR,CAAqBC,OAAO,CAAEF,IAA9B,CAAD,CAAR,CALsB,+EAOtBG,OAAO,CAACC,GAAR,CAAY,YAAMC,OAAlB,EAPsB,QAYpBC,MAZoB,CAYX,CAACL,IAAI,CAAE,WAAP,CAAoBC,OAAO,CAAE,EAA7B,CAZW,CAc1BJ,QAAQ,CAACQ,MAAD,CAAR,CAd0B,oEAAN,gEAAjB","sourcesContent":["\nimport * as api from '../api';\n\n// action creatores - functions that return actions\nexport const getPosts = () => async (dispatch) => {\n\n    try {\n        const { data } = await api.fetchPosts();\n\n        dispatch({ type: 'FETCH_ALL', payload: data});\n    } catch (error) {\n        console.log(error.message);\n    }\n\n\n\n    const action = {type: 'FETCH_ALL', payload: [] }\n\n    dispatch(action);\n}"]},"metadata":{},"sourceType":"module"}