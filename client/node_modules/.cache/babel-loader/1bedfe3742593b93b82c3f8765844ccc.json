{"ast":null,"code":"import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\n\nconst reducers = (posts = [], action) => {\n  switch (action.type) {\n    case FETCH_ALL:\n      return action.payload;\n\n    case LIKE:\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n\n    case CREATE:\n      return [...posts, action.payload];\n\n    case UPDATE:\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n\n    case DELETE:\n      return posts.filter(post => post._id !== action.payload);\n\n    default:\n      return posts;\n  }\n};\n\nexport default reducers;","map":{"version":3,"sources":["/Users/christopher/Desktop/Class Bootcamp/Bookish-1/client/src/reducers/posts.js"],"names":["FETCH_ALL","CREATE","UPDATE","DELETE","LIKE","reducers","posts","action","type","payload","map","post","_id","filter"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,IAA5C,QAAwD,0BAAxD;;AAEA,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACvC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,SAAL;AACE,aAAOO,MAAM,CAACE,OAAd;;AACF,SAAKL,IAAL;AACE,aAAOE,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAWA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,GAAkCL,MAAM,CAACE,OAAzC,GAAmDE,IAAxE,CAAP;;AACF,SAAKV,MAAL;AACE,aAAO,CAAC,GAAGK,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;;AACF,SAAKP,MAAL;AACE,aAAOI,KAAK,CAACI,GAAN,CAAWC,IAAD,IAAWA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,GAAkCL,MAAM,CAACE,OAAzC,GAAmDE,IAAxE,CAAP;;AACF,SAAKR,MAAL;AACE,aAAOG,KAAK,CAACO,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAA3C,CAAP;;AACE;AACI,aAAOH,KAAP;AAZV;AAcD,CAfD;;AAgBA,eAAeD,QAAf","sourcesContent":["import { FETCH_ALL, CREATE, UPDATE, DELETE, LIKE } from '../constants/actionTypes';\n\nconst reducers = (posts = [], action) => {\n  switch (action.type) {\n    case FETCH_ALL:\n      return action.payload;\n    case LIKE:\n      return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\n    case CREATE:\n      return [...posts, action.payload];\n    case UPDATE:\n      return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\n    case DELETE:\n      return posts.filter((post) => post._id !== action.payload);\n        default:\n            return posts;\n    }\n};\nexport default reducers;"]},"metadata":{},"sourceType":"module"}